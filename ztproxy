#!/usr/bin/env python3
#  vim: ts=4 sw=4 ai et
#
#  User-space proxy from stdin/stdout to a TCP port over ZeroTier.
#
#  Written by Sean Reifschneider, 2021
#  Based on the libzt Python example
#    https://github.com/zerotier/libzt/tree/master/examples/python
#
#  Placed in the Public Domain

import time
import sys
import os
import select

import libzt

def print_usage():
    '''print help'''
    print(
        "\nUsage: ztproxy <identity_dir> <nwid> <zt_service_port> <remote_ip> <remote_port>\n"
    )
    print("Ex: python3 ztproxy . 0123456789abcdef 9994 192.168.22.1 22\n")
    sys.exit(1)


is_joined = False # Flags to keep state
is_online = False # Flags to keep state

class MyEventCallbackClass(libzt.EventCallbackClass):
    def on_zerotier_event(self, msg):
        global is_online
        global is_joined
        if msg.eventCode == libzt.ZTS_EVENT_NODE_ONLINE:
            # The node is now online, you can join/leave networks
            is_online = True
        if msg.eventCode == libzt.ZTS_EVENT_NODE_OFFLINE:
            pass
        if msg.eventCode == libzt.ZTS_EVENT_NETWORK_READY_IP4:
            is_joined = True
            # The node has successfully joined a network and has an address
            # you can perform network calls now
        if msg.eventCode == libzt.ZTS_EVENT_PEER_DIRECT:
            pass
        if msg.eventCode == libzt.ZTS_EVENT_PEER_RELAY:
            pass

def main():
    global is_online
    global is_joined


    if len(sys.argv) != 6:
        print_usage()

    # Port used by ZeroTier to send encpryted UDP traffic
    # NOTE: Should be different from other instances of ZeroTier
    # running on the same machine
    zt_service_port = int(sys.argv[3])
    key_file_path = sys.argv[1]
    network_id = int(sys.argv[2], 16)
    remote_ip = sys.argv[4]
    remote_port = int(sys.argv[5])

    event_callback = MyEventCallbackClass()
    libzt.start(key_file_path, event_callback, zt_service_port)
    while not is_online:
        time.sleep(1)
    libzt.join(network_id)
    while not is_joined:
        time.sleep(1)

    try:
        client = libzt.socket(libzt.ZTS_AF_INET, libzt.ZTS_SOCK_STREAM, 0)
        client.connect((remote_ip, remote_port))
    except Exception as ex:
        sys.stderr.write('Connect Exception: {}\n'.format(str(ex)))
        sys.exit(1)

    os.set_blocking(0, False)
    poller = select.poll()
    poller.register(0, select.POLLIN | select.POLLHUP)
    still_reading = True
    stdin_data = b''
    while still_reading:
        try:
            for fd, event in poller.poll(300):
                if event & select.POLLIN:
                    data = os.read(0, 10240)
                    stdin_data = stdin_data + data
                if event & select.POLLHUP:
                    still_reading = False
                    break

            if stdin_data:
                send_len = client.send(stdin_data)
                stdin_data = stdin_data[send_len:]

            while True:
                try:
                    data = client.recv(10240, flags=libzt.ZTS_MSG_DONTWAIT)
                except Exception as ex:
                    if ex.args[0] == 'ZTS_ERR_SOCKET (-1)' and libzt.errno() == libzt.ZTS_ENOTCONN:
                        still_reading = False
                        break
                    if ex.args[0] != 'ZTS_ERR_SOCKET (-1)' or libzt.errno() != libzt.ZTS_EAGAIN:
                        raise
                    #  blocking recv with no data
                    break
                send_len = os.write(1, data)
                if send_len != len(data):
                    raise NotImplementedError('Buffered writes not implemented')
        except Exception as ex:
            sys.stderr.write('Exception: {}\n'.format(str(ex)))
            sys.stderr.write('errno: {}\n'.format(libzt.errno()))
            raise

if __name__ == "__main__":
    main()
